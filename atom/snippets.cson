# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.js':
  'newComponent':
    'prefix': 'newComp',
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';

      /**
       * $1MyComponent ~
      */
      export default class $2MyComponent extends Component {
        /**
         * Returns the rendered component
        */
        render() {
          return (
            <>$5</>
          );
        }
      }

      $3MyComponent.propTypes = {};
      $4MyComponent.defaultProps = {};
    """
  'newFunctionalComponent':
    'prefix': 'newFuncComp',
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';

      /**
       * $1MyComponent ~
      */
      export default function $2MyComponent(props) {
        return (
          <>$5</>
        );
      }

      $3MyComponent.propTypes = {};
      $4MyComponent.defaultProps = {};
    """
  'newEnzymeTest':
    'prefix': 'newEnzyme'
    'body': """
      import React from 'react';
      import { shallow } from 'enzyme';
      import { $1 } from '../../../src/components/$2';

      /** Utility function to wrap $3 */
      function createWrapper(props) {
        return shallow(
          <$4
            {...props}
          />,
        );
      }

      describe('$5', () => {
        let wrapper;

        it('$6does something', () => {
          wrapper = createWrapper();
        });
      });
    """
  'jestDescribe':
    'prefix': 'desc'
    'body': """
      describe('$1', () => {
        $2
      });$3
    """
  'jestIt':
    'prefix': 'it'
    'body': """
      it('$1', () => {
        $2
      });$3
    """
'.source.ruby':
  'initialize':
    'prefix': 'init'
    'body': """
      def initialize($1)
        $2
      end$3
    """
  'require':
    'prefix': 'req'
    'body': "require '$1'"
  'Frozen String Literal':
    'prefix': 'frozen'
    'body': "# frozen_string_literal: true"
  'RSpec Context':
    'prefix': 'cont'
    'body': """
      context '$1' do
        $2
      end$3
    """
  'RSpec Describe':
    'prefix': 'desc'
    'body': """
      describe '$1' do
        $2
      end$3
    """
  'RSpec Expect':
    'prefix': 'exp'
    'body': 'expect($1).to$2 '
  'RSpec it':
    'prefix': 'it'
    'body': """
      it '$1' do
        $2
      end$3
    """
  'RSpec let':
    'prefix': 'let'
    'body': 'let(:$1) { $2 }'
